# This workflow will build a docker container, publish it to Digitalocean Container Registry, and deploy it to DO kubernetes when a release is created
#
# To configure this workflow:
#
# 1. Ensure that your repository contains the deploy-api-pod.yml and the dockerfiles
# 2. Setup secrets in your repository by going to settings: Create DIGITALOCEAN_ACCESS_TOKEN, APP_NAME and LOGGING_DB_TYPE and others if you want to
# 3. Change the values for the GITHUB_REPOSITORY, REGISTRY_HOSTNAME, IMAGE_NAME, DO_CLUSTER, GATEWAY_IMAGE_NAME, LOGGINGAPI_IMAGE_NAME and POD_NAME

name: Docker Build and Deploy to DO kubernetes

on:
  push:
    branches: 
      - build

 # Environment variables available to all jobs and steps in this workflow - you must configure the secrets accordingly in the github Settings
env:
  GITHUB_SHA: ${{ github.sha }}
  GITHUB_REPOSITORY: <your github user>/<your github repository>
  REGISTRY_HOSTNAME: registry.digitalocean.com/<your DigitalOcean container registry name>
  IMAGE_NAME: <the container image name you wish>
  DO_CLUSTER: <the digitalocean cluster identifier>
  GATEWAY_IMAGE_NAME: <the image name for the gateway>
  LOGGINGAPI_IMAGE_NAME: <the image name for the logging service>
  POD_NAME: <the pod name for all the containers>
  DIGITALOCEAN_ACCESS_TOKEN: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}
  APP_NAME: ${{secrets.APP_NAME}}
  DATABASE_TYPE: ${{secrets.LOGGING_DB_TYPE}}
  APIS_DEPLOYMENT_FILE_NAME: deploy-api-pod.yml

jobs:
  build:
    name: Build docker images and deploy to DO kubernetes
    runs-on: ubuntu-latest
    steps:

    - name: Checkout
      uses: actions/checkout@v1

    - name: Install doctl
      uses: digitalocean/action-doctl@v2.1.0
      with:
        token: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}
    
    - name: Log in to DigitalOcean Container Registry with short-lived credentials
      run: doctl registry login --expiry-seconds 6000
      
    - name: Build gateway container image
      run: docker build "$REGISTRY_HOSTNAME/$GATEWAY_IMAGE_NAME" ./CoopGateway
    
    - name: Push gateway image to DigitalOcean Container Registry
      run: docker push "$REGISTRY_HOSTNAME/$GATEWAY_IMAGE_NAME":latest
      
      
    - name: Build gateway container image
      run: docker build "$REGISTRY_HOSTNAME/$LOGGINGAPI_IMAGE_NAME" ./APIs/LoggingService
    
    - name: Push gateway image to DigitalOcean Container Registry
      run: docker push "$REGISTRY_HOSTNAME/$LOGGINGAPI_IMAGE_NAME":latest
    
    - name: authenticate to DO
      run: doctl auth init

    - name: Save DigitalOcean kubeconfig
      run: doctl -t $DIGITALOCEAN_ACCESS_TOKEN k8s cluster config save $DO_CLUSTER
    
    - name: process environment variables
      run: kubectl delete secret loggingapi-data
      
    - run: kubectl create secret generic loggingapi-data --from-literal=logging-dbtype=$DATABASE_TYPE
    
    - run: kubectl describe secret loggingapi-data
      
    - name: Update deployment file with gateway image registry name
      run: TAG=$(echo $GITHUB_SHA | head -c7) && sed -i "s|<GATEWAYAPI_IMAGE>|$REGISTRY_HOSTNAME/$GATEWAY_IMAGE_NAME:latest|" $GITHUB_WORKSPACE/$APIS_DEPLOYMENT_FILE_NAME
      
      
    - name: Update deployment file with logging service image registry name
      run: TAG=$(echo $GITHUB_SHA | head -c7) && sed -i "s|<LOGGINGAPI_IMAGE>|$REGISTRY_HOSTNAME/$LOGGINGAPI_IMAGE_NAME:latest|" $GITHUB_WORKSPACE/$APIS_DEPLOYMENT_FILE_NAME

    - name: Deploy to DigitalOcean Kubernetes
      run: kubectl apply -f $GITHUB_WORKSPACE/$APIS_DEPLOYMENT_FILE_NAME

    - name: Verify deployment
      run: kubectl rollout status deployment/$POD_NAME
